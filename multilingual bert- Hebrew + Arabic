{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":6237698,"sourceType":"datasetVersion","datasetId":3583615},{"sourceId":6250000,"sourceType":"datasetVersion","datasetId":3591703},{"sourceId":6255327,"sourceType":"datasetVersion","datasetId":3595016},{"sourceId":6257196,"sourceType":"datasetVersion","datasetId":3596149}],"dockerImageVersionId":30497,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/liely1/multilingual-bert-hebrew-arabic?scriptVersionId=139112499\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"!pip install Transformers","metadata":{"id":"AIR6FmOJpxXj","outputId":"070fa648-9775-4575-e712-498e3cbc2b8d","execution":{"iopub.status.busy":"2023-08-06T19:09:03.55128Z","iopub.execute_input":"2023-08-06T19:09:03.551693Z","iopub.status.idle":"2023-08-06T19:09:18.86849Z","shell.execute_reply.started":"2023-08-06T19:09:03.551651Z","shell.execute_reply":"2023-08-06T19:09:18.867325Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: Transformers in /opt/conda/lib/python3.10/site-packages (4.29.2)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from Transformers) (3.12.0)\nRequirement already satisfied: huggingface-hub<1.0,>=0.14.1 in /opt/conda/lib/python3.10/site-packages (from Transformers) (0.14.1)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from Transformers) (1.23.5)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from Transformers) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from Transformers) (5.4.1)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from Transformers) (2023.5.5)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from Transformers) (2.28.2)\nRequirement already satisfied: tokenizers!=0.11.3,<0.14,>=0.11.1 in /opt/conda/lib/python3.10/site-packages (from Transformers) (0.13.3)\nRequirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from Transformers) (4.64.1)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.14.1->Transformers) (2023.5.0)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.14.1->Transformers) (4.5.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->Transformers) (3.0.9)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->Transformers) (2.1.1)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->Transformers) (3.4)\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->Transformers) (1.26.15)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->Transformers) (2023.5.7)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"code","source":"def conf_matrix(y, y_pred, title, labels):\n    fig, ax =plt.subplots(figsize=(7.5,7.5))\n    ax=sns.heatmap(confusion_matrix(y, y_pred), annot=True, cmap=\"Purples\", fmt='g', cbar=False, annot_kws={\"size\":30})\n    plt.title(title, fontsize=25)\n    ax.xaxis.set_ticklabels(labels, fontsize=16) \n    ax.yaxis.set_ticklabels(labels, fontsize=14.5)\n    ax.set_ylabel('Test', fontsize=25)\n    ax.set_xlabel('Predicted', fontsize=25)\n    plt.show()","metadata":{"id":"L7WOil4SJUM8","execution":{"iopub.status.busy":"2023-08-06T19:09:18.870995Z","iopub.execute_input":"2023-08-06T19:09:18.871381Z","iopub.status.idle":"2023-08-06T19:09:18.879219Z","shell.execute_reply.started":"2023-08-06T19:09:18.871344Z","shell.execute_reply":"2023-08-06T19:09:18.878238Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import torch\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport time\n\n\nfrom transformers import BertModel\nfrom transformers import BertTokenizer, BertForSequenceClassification, AdamW,get_linear_schedule_with_warmup\nfrom torch.utils.data import TensorDataset, DataLoader\n\n\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import RandomOverSampler\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nfrom imblearn.over_sampling import RandomOverSampler\nfrom torch.utils.data import RandomSampler,SequentialSampler\n\ntorch.__version__","metadata":{"id":"smLckLT6qGW3","outputId":"68c2d2c1-5395-4592-c7aa-fe39b807a3e4","execution":{"iopub.status.busy":"2023-08-06T19:09:18.881044Z","iopub.execute_input":"2023-08-06T19:09:18.881361Z","iopub.status.idle":"2023-08-06T19:09:32.58755Z","shell.execute_reply.started":"2023-08-06T19:09:18.881331Z","shell.execute_reply":"2023-08-06T19:09:32.58657Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/__init__.py:98: UserWarning: unable to load libtensorflow_io_plugins.so: unable to open file: libtensorflow_io_plugins.so, from paths: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io_plugins.so']\ncaused by: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io_plugins.so: undefined symbol: _ZN3tsl6StatusC1EN10tensorflow5error4CodeESt17basic_string_viewIcSt11char_traitsIcEENS_14SourceLocationE']\n  warnings.warn(f\"unable to load libtensorflow_io_plugins.so: {e}\")\n/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/__init__.py:104: UserWarning: file system plugins are not loaded: unable to open file: libtensorflow_io.so, from paths: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io.so']\ncaused by: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io.so: undefined symbol: _ZTVN10tensorflow13GcsFileSystemE']\n  warnings.warn(f\"file system plugins are not loaded: {e}\")\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"'2.0.0'"},"metadata":{}}]},{"cell_type":"code","source":"#set style for plots\nsns.set_style(\"whitegrid\")\nsns.despine()\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True)\nplt.rc(\"axes\", labelweight=\"bold\", labelsize=\"large\", titleweight=\"bold\", titlepad=10)","metadata":{"id":"6WkCWPLhJpwx","outputId":"d500d8a4-9438-4907-d092-f9d75a055803","execution":{"iopub.status.busy":"2023-08-06T19:09:32.590069Z","iopub.execute_input":"2023-08-06T19:09:32.590451Z","iopub.status.idle":"2023-08-06T19:09:32.602649Z","shell.execute_reply.started":"2023-08-06T19:09:32.590417Z","shell.execute_reply":"2023-08-06T19:09:32.601733Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_28/1787276967.py:4: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n  plt.style.use(\"seaborn-whitegrid\")\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 0 Axes>"},"metadata":{}}]},{"cell_type":"code","source":"import random\n\nseed_value=42\nrandom.seed(seed_value)\nnp.random.seed(seed_value)\ntorch.manual_seed(seed_value)\ntorch.cuda.manual_seed_all(seed_value)","metadata":{"id":"NrDKo_iRsDpU","execution":{"iopub.status.busy":"2023-08-06T19:09:32.604019Z","iopub.execute_input":"2023-08-06T19:09:32.604571Z","iopub.status.idle":"2023-08-06T19:09:32.628474Z","shell.execute_reply.started":"2023-08-06T19:09:32.604541Z","shell.execute_reply":"2023-08-06T19:09:32.627471Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# Load the CSV file\ndata = pd.read_csv(\"/kaggle/input/hebrew-arabic-dataset/HebrewArabic_dataset5.8.csv\")\ndata","metadata":{"id":"CVnp__5WqNZS","outputId":"a95632df-0438-4dee-ad93-72b11614a4d1","execution":{"iopub.status.busy":"2023-08-06T19:09:32.630149Z","iopub.execute_input":"2023-08-06T19:09:32.630525Z","iopub.status.idle":"2023-08-06T19:09:32.677491Z","shell.execute_reply.started":"2023-08-06T19:09:32.630492Z","shell.execute_reply":"2023-08-06T19:09:32.676634Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"                                             tweet_text cyberbullying_type\n0     זה לא כזה נורא. פעם התחלתי עם בחורה והיא אמרה ...  not_cyberbullying\n1           אוהבת ישראל. כל מה שהיא אומרת זה לטובת העם.  not_cyberbullying\n2            בהצלחה מאי תותחית מאוד מתאימה לתפקיד קדימה  not_cyberbullying\n3                           לא יודעת להתבטא בממלכתיות .  not_cyberbullying\n4                                   זה מה שבאמת חסר לנו  not_cyberbullying\n...                                                 ...                ...\n2954  الحجة اكتشفت انو في قصص بالحياة احلى من اير جوزها      cyberbullying\n2955                مع الرقاصة ههههه تروح تبعبص بالعروس      cyberbullying\n2956            الحجه عم تتاكد اذا البز سيلكون او طبيعي      cyberbullying\n2957                         الحجة شوي كمان وحتمسك كسها      cyberbullying\n2958                ما يدافع عن الشراميط الا اللي مثلهم      cyberbullying\n\n[2959 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tweet_text</th>\n      <th>cyberbullying_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>זה לא כזה נורא. פעם התחלתי עם בחורה והיא אמרה ...</td>\n      <td>not_cyberbullying</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>אוהבת ישראל. כל מה שהיא אומרת זה לטובת העם.</td>\n      <td>not_cyberbullying</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>בהצלחה מאי תותחית מאוד מתאימה לתפקיד קדימה</td>\n      <td>not_cyberbullying</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>לא יודעת להתבטא בממלכתיות .</td>\n      <td>not_cyberbullying</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>זה מה שבאמת חסר לנו</td>\n      <td>not_cyberbullying</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2954</th>\n      <td>الحجة اكتشفت انو في قصص بالحياة احلى من اير جوزها</td>\n      <td>cyberbullying</td>\n    </tr>\n    <tr>\n      <th>2955</th>\n      <td>مع الرقاصة ههههه تروح تبعبص بالعروس</td>\n      <td>cyberbullying</td>\n    </tr>\n    <tr>\n      <th>2956</th>\n      <td>الحجه عم تتاكد اذا البز سيلكون او طبيعي</td>\n      <td>cyberbullying</td>\n    </tr>\n    <tr>\n      <th>2957</th>\n      <td>الحجة شوي كمان وحتمسك كسها</td>\n      <td>cyberbullying</td>\n    </tr>\n    <tr>\n      <th>2958</th>\n      <td>ما يدافع عن الشراميط الا اللي مثلهم</td>\n      <td>cyberbullying</td>\n    </tr>\n  </tbody>\n</table>\n<p>2959 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data = data.rename(columns={'tweet_text': 'text', 'cyberbullying_type': 'type'})","metadata":{"id":"xQkboR4nqRr3","execution":{"iopub.status.busy":"2023-08-06T19:09:32.678648Z","iopub.execute_input":"2023-08-06T19:09:32.67965Z","iopub.status.idle":"2023-08-06T19:09:32.685446Z","shell.execute_reply.started":"2023-08-06T19:09:32.679616Z","shell.execute_reply":"2023-08-06T19:09:32.684314Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"data['type'] = data['type'].replace({'cyberbullying':0,'not_cyberbullying':1})\ndata","metadata":{"id":"9ECuWfNRqXbI","outputId":"589c8319-8569-47ae-8934-9f20cb990202","execution":{"iopub.status.busy":"2023-08-06T19:09:32.687119Z","iopub.execute_input":"2023-08-06T19:09:32.687462Z","iopub.status.idle":"2023-08-06T19:09:32.706778Z","shell.execute_reply.started":"2023-08-06T19:09:32.687415Z","shell.execute_reply":"2023-08-06T19:09:32.705919Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"                                                   text  type\n0     זה לא כזה נורא. פעם התחלתי עם בחורה והיא אמרה ...     1\n1           אוהבת ישראל. כל מה שהיא אומרת זה לטובת העם.     1\n2            בהצלחה מאי תותחית מאוד מתאימה לתפקיד קדימה     1\n3                           לא יודעת להתבטא בממלכתיות .     1\n4                                   זה מה שבאמת חסר לנו     1\n...                                                 ...   ...\n2954  الحجة اكتشفت انو في قصص بالحياة احلى من اير جوزها     0\n2955                مع الرقاصة ههههه تروح تبعبص بالعروس     0\n2956            الحجه عم تتاكد اذا البز سيلكون او طبيعي     0\n2957                         الحجة شوي كمان وحتمسك كسها     0\n2958                ما يدافع عن الشراميط الا اللي مثلهم     0\n\n[2959 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>זה לא כזה נורא. פעם התחלתי עם בחורה והיא אמרה ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>אוהבת ישראל. כל מה שהיא אומרת זה לטובת העם.</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>בהצלחה מאי תותחית מאוד מתאימה לתפקיד קדימה</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>לא יודעת להתבטא בממלכתיות .</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>זה מה שבאמת חסר לנו</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2954</th>\n      <td>الحجة اكتشفت انو في قصص بالحياة احلى من اير جوزها</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2955</th>\n      <td>مع الرقاصة ههههه تروح تبعبص بالعروس</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2956</th>\n      <td>الحجه عم تتاكد اذا البز سيلكون او طبيعي</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2957</th>\n      <td>الحجة شوي كمان وحتمسك كسها</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2958</th>\n      <td>ما يدافع عن الشراميط الا اللي مثلهم</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>2959 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"types = [\"cyberbullying\",\"not bullying\"]","metadata":{"id":"sm8GRC9yIvRJ","execution":{"iopub.status.busy":"2023-08-06T19:09:32.708179Z","iopub.execute_input":"2023-08-06T19:09:32.708505Z","iopub.status.idle":"2023-08-06T19:09:32.712966Z","shell.execute_reply.started":"2023-08-06T19:09:32.708475Z","shell.execute_reply":"2023-08-06T19:09:32.712022Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"data.type.value_counts()","metadata":{"id":"BuXdbAoVqdgH","outputId":"9f362ad3-43e2-4b4c-9517-862feb9d88bc","execution":{"iopub.status.busy":"2023-08-06T19:09:32.718335Z","iopub.execute_input":"2023-08-06T19:09:32.719211Z","iopub.status.idle":"2023-08-06T19:09:32.730512Z","shell.execute_reply.started":"2023-08-06T19:09:32.719165Z","shell.execute_reply":"2023-08-06T19:09:32.729514Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"0    1495\n1    1464\nName: type, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ndevice","metadata":{"id":"StU0zHtYq698","outputId":"0cdf4d4b-e048-424d-f9ac-bf7c2bee618c","execution":{"iopub.status.busy":"2023-08-06T19:09:32.732162Z","iopub.execute_input":"2023-08-06T19:09:32.732537Z","iopub.status.idle":"2023-08-06T19:09:32.766178Z","shell.execute_reply.started":"2023-08-06T19:09:32.732506Z","shell.execute_reply":"2023-08-06T19:09:32.765201Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"'cuda'"},"metadata":{}}]},{"cell_type":"code","source":"torch.cuda.get_device_name(0)","metadata":{"id":"62KNz7NjrAYh","outputId":"7600c608-f512-4011-f322-4f58e5ce3349","execution":{"iopub.status.busy":"2023-08-06T19:09:32.769998Z","iopub.execute_input":"2023-08-06T19:09:32.770537Z","iopub.status.idle":"2023-08-06T19:09:32.787866Z","shell.execute_reply.started":"2023-08-06T19:09:32.770506Z","shell.execute_reply":"2023-08-06T19:09:32.786879Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"'Tesla P100-PCIE-16GB'"},"metadata":{}}]},{"cell_type":"code","source":"X = data['text'].values\ny = data['type'].values","metadata":{"id":"G3ZEGIg_rZIf","execution":{"iopub.status.busy":"2023-08-06T19:09:32.789338Z","iopub.execute_input":"2023-08-06T19:09:32.789686Z","iopub.status.idle":"2023-08-06T19:09:32.79453Z","shell.execute_reply.started":"2023-08-06T19:09:32.789655Z","shell.execute_reply":"2023-08-06T19:09:32.793439Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=seed_value)","metadata":{"id":"9oUTIpxsrwN8","execution":{"iopub.status.busy":"2023-08-06T19:09:32.796161Z","iopub.execute_input":"2023-08-06T19:09:32.796654Z","iopub.status.idle":"2023-08-06T19:09:32.808339Z","shell.execute_reply.started":"2023-08-06T19:09:32.79661Z","shell.execute_reply":"2023-08-06T19:09:32.80733Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.1, stratify=y_train, random_state=seed_value)","metadata":{"id":"qc5zAbHTsJDr","execution":{"iopub.status.busy":"2023-08-06T19:09:32.809866Z","iopub.execute_input":"2023-08-06T19:09:32.810205Z","iopub.status.idle":"2023-08-06T19:09:32.817646Z","shell.execute_reply.started":"2023-08-06T19:09:32.810174Z","shell.execute_reply":"2023-08-06T19:09:32.816941Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"ros = RandomOverSampler()\nX_train_os, y_train_os = ros.fit_resample(np.array(X_train).reshape(-1,1),np.array(y_train).reshape(-1,1))","metadata":{"id":"f0fdwqqY43Li","execution":{"iopub.status.busy":"2023-08-06T19:09:32.819096Z","iopub.execute_input":"2023-08-06T19:09:32.820219Z","iopub.status.idle":"2023-08-06T19:09:32.827062Z","shell.execute_reply.started":"2023-08-06T19:09:32.820178Z","shell.execute_reply":"2023-08-06T19:09:32.826401Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"X_train_os = X_train_os.flatten()\ny_train_os = y_train_os.flatten()","metadata":{"id":"mTH1feOasQy4","execution":{"iopub.status.busy":"2023-08-06T19:09:32.828433Z","iopub.execute_input":"2023-08-06T19:09:32.829533Z","iopub.status.idle":"2023-08-06T19:09:32.834973Z","shell.execute_reply.started":"2023-08-06T19:09:32.829503Z","shell.execute_reply":"2023-08-06T19:09:32.834304Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"(unique, counts) = np.unique(y_train_os, return_counts=True)\nnp.asarray((unique, counts)).T","metadata":{"id":"Zg9rSh0osTdO","outputId":"6cf5658c-9497-453d-ac58-87ddb1bd252a","execution":{"iopub.status.busy":"2023-08-06T19:09:32.836297Z","iopub.execute_input":"2023-08-06T19:09:32.836756Z","iopub.status.idle":"2023-08-06T19:09:32.845722Z","shell.execute_reply.started":"2023-08-06T19:09:32.836726Z","shell.execute_reply":"2023-08-06T19:09:32.845064Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"array([[   0, 1076],\n       [   1, 1076]])"},"metadata":{}}]},{"cell_type":"code","source":"# Define the model architecture\nmodel = BertForSequenceClassification.from_pretrained(\"bert-base-multilingual-cased\", num_labels=2)","metadata":{"id":"9vaj6hWyOVO2","outputId":"b7a4a12e-e988-4b32-a2f7-3fdd1691752a","execution":{"iopub.status.busy":"2023-08-06T19:09:32.847435Z","iopub.execute_input":"2023-08-06T19:09:32.847761Z","iopub.status.idle":"2023-08-06T19:09:59.505612Z","shell.execute_reply.started":"2023-08-06T19:09:32.84773Z","shell.execute_reply":"2023-08-06T19:09:59.504636Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading (…)lve/main/config.json:   0%|          | 0.00/625 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d7da99969e714429a21a3e5f82bab0b5"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading model.safetensors:   0%|          | 0.00/714M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f495eec6e8bd4f78b978cad4a32a4885"}},"metadata":{}},{"name":"stderr","text":"Some weights of the model checkpoint at bert-base-multilingual-cased were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.seq_relationship.weight', 'cls.predictions.transform.dense.bias', 'cls.seq_relationship.bias']\n- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\nSome weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-multilingual-cased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Load the tokenizer\ntokenizer = BertTokenizer.from_pretrained(\"bert-base-multilingual-cased\")","metadata":{"id":"7kkY3OYMrLbu","execution":{"iopub.status.busy":"2023-08-06T19:09:59.507254Z","iopub.execute_input":"2023-08-06T19:09:59.507622Z","iopub.status.idle":"2023-08-06T19:10:01.220426Z","shell.execute_reply.started":"2023-08-06T19:09:59.507584Z","shell.execute_reply":"2023-08-06T19:10:01.219419Z"},"trusted":true},"execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading (…)solve/main/vocab.txt:   0%|          | 0.00/996k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c6b5e748ce8145d8940783c00678828b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading (…)okenizer_config.json:   0%|          | 0.00/29.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b8ca690667a94439837a3a669518f40c"}},"metadata":{}}]},{"cell_type":"code","source":"def bert_tokenizer(data):\n    input_ids = []\n    attention_masks = []\n    for sent in data:\n        encoded_sent = tokenizer.encode_plus(\n            text=sent,\n            add_special_tokens=True,        # Add `[CLS]` and `[SEP]` special tokens\n            max_length=MAX_LEN,             # Choose max length to truncate/pad\n            pad_to_max_length=True,         # Pad sentence to max length \n            return_attention_mask=True      # Return attention mask\n            )\n        input_ids.append(encoded_sent.get('input_ids'))\n        attention_masks.append(encoded_sent.get('attention_mask'))\n\n    # Convert lists to tensors\n    input_ids = torch.tensor(input_ids)\n    attention_masks = torch.tensor(attention_masks)\n\n    return input_ids, attention_masks","metadata":{"id":"cseVEtdBsX5T","execution":{"iopub.status.busy":"2023-08-06T19:10:01.222077Z","iopub.execute_input":"2023-08-06T19:10:01.22245Z","iopub.status.idle":"2023-08-06T19:10:01.739979Z","shell.execute_reply.started":"2023-08-06T19:10:01.222417Z","shell.execute_reply":"2023-08-06T19:10:01.738767Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# Tokenize train tweets\nencoded_tweets = (tokenizer.encode(sent, add_special_tokens=True) for sent in X_train)\n\n# Find the longest tokenized tweet\nmax_len = max([len(sent) for sent in encoded_tweets])\nprint('Max length: ', max_len)","metadata":{"id":"ajcVxKCJ5vQA","outputId":"a13f37ec-aef1-4337-9844-1e129296854d","execution":{"iopub.status.busy":"2023-08-06T19:10:01.743159Z","iopub.execute_input":"2023-08-06T19:10:01.744092Z","iopub.status.idle":"2023-08-06T19:10:02.93266Z","shell.execute_reply.started":"2023-08-06T19:10:01.744058Z","shell.execute_reply":"2023-08-06T19:10:02.931816Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Max length:  105\n","output_type":"stream"}]},{"cell_type":"code","source":"MAX_LEN = 110","metadata":{"id":"RU3jvKfYtCtL","execution":{"iopub.status.busy":"2023-08-06T19:10:02.936697Z","iopub.execute_input":"2023-08-06T19:10:02.939045Z","iopub.status.idle":"2023-08-06T19:10:02.945539Z","shell.execute_reply.started":"2023-08-06T19:10:02.93901Z","shell.execute_reply":"2023-08-06T19:10:02.944033Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"# Convert target columns to pytorch tensors format\ntrain_labels = torch.from_numpy(y_train_os)\nval_labels = torch.from_numpy(y_valid)\ntest_labels = torch.from_numpy(y_test)","metadata":{"id":"KDDGP7Mzs1wr","execution":{"iopub.status.busy":"2023-08-06T19:10:02.94969Z","iopub.execute_input":"2023-08-06T19:10:02.951115Z","iopub.status.idle":"2023-08-06T19:10:02.966014Z","shell.execute_reply.started":"2023-08-06T19:10:02.951082Z","shell.execute_reply":"2023-08-06T19:10:02.965138Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"train_inputs, train_masks = bert_tokenizer(X_train_os)\nval_inputs, val_masks = bert_tokenizer(X_valid)\ntest_inputs, test_masks = bert_tokenizer(X_test)","metadata":{"id":"nvRUDtpwskQn","outputId":"73dd58b1-e983-409b-ad7c-3b5bf943f3e2","execution":{"iopub.status.busy":"2023-08-06T19:10:02.968177Z","iopub.execute_input":"2023-08-06T19:10:02.970152Z","iopub.status.idle":"2023-08-06T19:10:04.522246Z","shell.execute_reply.started":"2023-08-06T19:10:02.970119Z","shell.execute_reply":"2023-08-06T19:10:04.521274Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stderr","text":"Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=True` to explicitly truncate examples to max length. Defaulting to 'longest_first' truncation strategy. If you encode pairs of sequences (GLUE-style) with the tokenizer you can select this strategy more precisely by providing a specific strategy to `truncation`.\n/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:2364: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"batch_size = 32","metadata":{"id":"FbgvE1VTs8Ye","execution":{"iopub.status.busy":"2023-08-06T19:10:04.523786Z","iopub.execute_input":"2023-08-06T19:10:04.524141Z","iopub.status.idle":"2023-08-06T19:10:04.528722Z","shell.execute_reply.started":"2023-08-06T19:10:04.524107Z","shell.execute_reply":"2023-08-06T19:10:04.527703Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"# Create the DataLoader for our training set\ntrain_data = TensorDataset(train_inputs, train_masks, train_labels)\ntrain_sampler = RandomSampler(train_data)\ntrain_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)\n\n# Create the DataLoader for our validation set\nval_data = TensorDataset(val_inputs, val_masks, val_labels)\nval_sampler = SequentialSampler(val_data)\nval_dataloader = DataLoader(val_data, sampler=val_sampler, batch_size=batch_size)\n\n# Create the DataLoader for our test set\ntest_data = TensorDataset(test_inputs, test_masks, test_labels)\ntest_sampler = SequentialSampler(test_data)\ntest_dataloader = DataLoader(test_data, sampler=test_sampler, batch_size=batch_size)","metadata":{"id":"mu2yWYwKtNrS","execution":{"iopub.status.busy":"2023-08-06T19:10:04.530546Z","iopub.execute_input":"2023-08-06T19:10:04.531269Z","iopub.status.idle":"2023-08-06T19:10:04.539158Z","shell.execute_reply.started":"2023-08-06T19:10:04.531237Z","shell.execute_reply":"2023-08-06T19:10:04.538179Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"from sklearn.svm import SVC\n\nclass Bert_Classifier(nn.Module):\n    def __init__(self, freeze_bert=False):\n        super(Bert_Classifier, self).__init__()\n        # Specify hidden size of BERT and number of labels\n        n_input = 768\n        n_output = 5\n        # Instantiate BERT model\n        self.bert = BertModel.from_pretrained('bert-base-multilingual-cased')\n        \n        # Add dense layers to perform the classification\n        self.classifier = nn.Sequential(\n            nn.Linear(n_input, n_output),\n            nn.ReLU()\n        )\n        \n        # Add SVM classifier\n        self.svm_classifier = SVC(kernel='linear', probability=True)\n        \n        # Add possibility to freeze the BERT model\n        if freeze_bert:\n            for param in self.bert.parameters():\n                param.requires_grad = False\n        \n    def forward(self, input_ids, attention_mask):\n        # Feed input data to BERT\n        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)\n        \n        # Extract the last hidden state of the token `[CLS]` for classification task\n        last_hidden_state_cls = outputs[0][:, 0, :]\n        \n        # Feed input to classifier to compute logits\n        logits = self.classifier(last_hidden_state_cls)\n        \n        return logits\n    \n    def svm_fit(self, X, y):\n        self.svm_classifier.fit(X, y)\n        \n    def svm_predict_proba(self, X):\n        return self.svm_classifier.predict_proba(X)\n    ","metadata":{"id":"7YKY80wqtN7i","outputId":"fef8f1f4-4208-4c7c-cd5d-5ff445dcbf92","execution":{"iopub.status.busy":"2023-08-06T19:10:04.545791Z","iopub.execute_input":"2023-08-06T19:10:04.546095Z","iopub.status.idle":"2023-08-06T19:10:04.555281Z","shell.execute_reply.started":"2023-08-06T19:10:04.546071Z","shell.execute_reply":"2023-08-06T19:10:04.554218Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"def initialize_model(epochs=4):\n    # Instantiate Bert Classifier\n    bert_classifier = Bert_Classifier(freeze_bert=False)\n    \n    bert_classifier.to(device)\n\n    # Set up optimizer\n    optimizer = AdamW(bert_classifier.parameters(),\n                      lr=5e-5,    # learning rate, set to default value\n                      eps=1e-8    # decay, set to default value\n                      )\n    \n    ### Set up learning rate scheduler ###\n\n    # Calculate total number of training steps\n    total_steps = len(train_dataloader) * epochs\n\n    # Defint the scheduler\n    scheduler = get_linear_schedule_with_warmup(optimizer,\n                                                num_warmup_steps=0, # Default value\n                                                num_training_steps=total_steps)\n    return bert_classifier, optimizer, scheduler","metadata":{"id":"Hmb83S1UCtNJ","execution":{"iopub.status.busy":"2023-08-06T19:10:04.556861Z","iopub.execute_input":"2023-08-06T19:10:04.557199Z","iopub.status.idle":"2023-08-06T19:10:04.568549Z","shell.execute_reply.started":"2023-08-06T19:10:04.557169Z","shell.execute_reply":"2023-08-06T19:10:04.567558Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\nEPOCHS=4","metadata":{"id":"Kf_w6s6SEZQI","execution":{"iopub.status.busy":"2023-08-06T19:10:04.570188Z","iopub.execute_input":"2023-08-06T19:10:04.570551Z","iopub.status.idle":"2023-08-06T19:10:04.580405Z","shell.execute_reply.started":"2023-08-06T19:10:04.570521Z","shell.execute_reply":"2023-08-06T19:10:04.579422Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"bert_classifier, optimizer, scheduler = initialize_model(epochs=EPOCHS)","metadata":{"id":"kVs_OcQzEYgR","outputId":"17cc9f1b-336a-45e8-c7bd-bdf2e77244ba","execution":{"iopub.status.busy":"2023-08-06T19:10:04.581864Z","iopub.execute_input":"2023-08-06T19:10:04.58234Z","iopub.status.idle":"2023-08-06T19:10:11.751244Z","shell.execute_reply.started":"2023-08-06T19:10:04.582308Z","shell.execute_reply":"2023-08-06T19:10:11.750236Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stderr","text":"Some weights of the model checkpoint at bert-base-multilingual-cased were not used when initializing BertModel: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.seq_relationship.weight', 'cls.predictions.transform.dense.bias', 'cls.seq_relationship.bias']\n- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n/opt/conda/lib/python3.10/site-packages/transformers/optimization.py:407: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"# Extract BERT features from the training set\ntrain_features = []\nfor batch in train_dataloader:\n    batch = tuple(t.to(device) for t in batch)\n    input_ids, attention_mask, labels = batch\n    with torch.no_grad():\n        outputs = bert_classifier.bert(input_ids=input_ids, attention_mask=attention_mask)\n        last_hidden_state_cls = outputs[0][:, 0, :].cpu().numpy()\n    train_features.extend(last_hidden_state_cls)\ntrain_features = np.array(train_features)","metadata":{"execution":{"iopub.status.busy":"2023-08-06T19:10:11.752728Z","iopub.execute_input":"2023-08-06T19:10:11.753693Z","iopub.status.idle":"2023-08-06T19:10:20.038083Z","shell.execute_reply.started":"2023-08-06T19:10:11.753656Z","shell.execute_reply":"2023-08-06T19:10:20.037134Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"# Define Cross entropy Loss function for the multiclass classification task\nloss_fn = nn.CrossEntropyLoss()\n\ndef bert_train(model, train_dataloader, val_dataloader=None, epochs=4, evaluation=False):\n\n    print(\"Start training...\\n\")\n    for epoch_i in range(epochs):\n        print(\"-\"*10)\n        print(\"Epoch : {}\".format(epoch_i+1))\n        print(\"-\"*10)\n        print(\"-\"*38)\n        print(f\"{'BATCH NO.':^7} | {'TRAIN LOSS':^12} | {'ELAPSED (s)':^9}\")\n        print(\"-\"*38)\n\n        # Measure the elapsed time of each epoch\n        t0_epoch, t0_batch = time.time(), time.time()\n\n        # Reset tracking variables at the beginning of each epoch\n        total_loss, batch_loss, batch_counts = 0, 0, 0\n        \n        ###TRAINING###\n\n        # Put the model into the training mode\n        model.train()\n\n        for step, batch in enumerate(train_dataloader):\n            batch_counts +=1\n            \n            b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)\n\n            # Zero out any previously calculated gradients\n            model.zero_grad()\n\n            # Perform a forward pass and get logits.\n            logits = model(b_input_ids, b_attn_mask)\n\n            # Compute loss and accumulate the loss values\n            loss = loss_fn(logits, b_labels)\n            batch_loss += loss.item()\n            total_loss += loss.item()\n\n            # Perform a backward pass to calculate gradients\n            loss.backward()\n\n            # Clip the norm of the gradients to 1.0 to prevent \"exploding gradients\"\n            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n            # Update model parameters:\n            # fine tune BERT params and train additional dense layers\n            optimizer.step()\n            # update learning rate\n            scheduler.step()\n\n            # Print the loss values and time elapsed for every 100 batches\n            if (step % 100 == 0 and step != 0) or (step == len(train_dataloader) - 1):\n                # Calculate time elapsed for 20 batches\n                time_elapsed = time.time() - t0_batch\n                \n                print(f\"{step:^9} | {batch_loss / batch_counts:^12.6f} | {time_elapsed:^9.2f}\")\n\n                # Reset batch tracking variables\n                batch_loss, batch_counts = 0, 0\n                t0_batch = time.time()\n\n        # Calculate the average loss over the entire training data\n        avg_train_loss = total_loss / len(train_dataloader)\n\n        ###EVALUATION###\n        \n        # Put the model into the evaluation mode\n        model.eval()\n        \n        # Define empty lists to host accuracy and validation for each batch\n        val_accuracy = []\n        val_loss = []\n\n        for batch in val_dataloader:\n            batch_input_ids, batch_attention_mask, batch_labels = tuple(t.to(device) for t in batch)\n            \n            # We do not want to update the params during the evaluation,\n            # So we specify that we dont want to compute the gradients of the tensors\n            # by calling the torch.no_grad() method\n            with torch.no_grad():\n                logits = model(batch_input_ids, batch_attention_mask)\n\n            loss = loss_fn(logits, batch_labels)\n\n            val_loss.append(loss.item())\n\n            # Get the predictions starting from the logits (get index of highest logit)\n            preds = torch.argmax(logits, dim=1).flatten()\n\n            # Calculate the validation accuracy \n            accuracy = (preds == batch_labels).cpu().numpy().mean() * 100\n            val_accuracy.append(accuracy)\n\n        # Compute the average accuracy and loss over the validation set\n        val_loss = np.mean(val_loss)\n        val_accuracy = np.mean(val_accuracy)\n        \n        # Print performance over the entire training data\n        time_elapsed = time.time() - t0_epoch\n        print(\"-\"*61)\n        print(f\"{'AVG TRAIN LOSS':^12} | {'VAL LOSS':^10} | {'VAL ACCURACY (%)':^9} | {'ELAPSED (s)':^9}\")\n        print(\"-\"*61)\n        print(f\"{avg_train_loss:^14.6f} | {val_loss:^10.6f} | {val_accuracy:^17.2f} | {time_elapsed:^9.2f}\")\n        print(\"-\"*61)\n        print(\"\\n\")\n    \n    print(\"Training complete!\")","metadata":{"id":"yoSnQ_nkEaIc","execution":{"iopub.status.busy":"2023-08-06T19:10:20.039567Z","iopub.execute_input":"2023-08-06T19:10:20.04013Z","iopub.status.idle":"2023-08-06T19:10:20.057531Z","shell.execute_reply.started":"2023-08-06T19:10:20.040098Z","shell.execute_reply":"2023-08-06T19:10:20.056545Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"bert_train(bert_classifier, train_dataloader, val_dataloader, epochs=EPOCHS)","metadata":{"id":"Fx41LY9TFbaP","outputId":"31ab6e1f-9982-4354-bed8-5b791d066357","execution":{"iopub.status.busy":"2023-08-06T19:10:20.05892Z","iopub.execute_input":"2023-08-06T19:10:20.059345Z","iopub.status.idle":"2023-08-06T19:11:53.574003Z","shell.execute_reply.started":"2023-08-06T19:10:20.059314Z","shell.execute_reply":"2023-08-06T19:11:53.572983Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"Start training...\n\n----------\nEpoch : 1\n----------\n--------------------------------------\nBATCH NO. |  TRAIN LOSS  | ELAPSED (s)\n--------------------------------------\n   67     |   0.686552   |   22.62  \n-------------------------------------------------------------\nAVG TRAIN LOSS |  VAL LOSS  | VAL ACCURACY (%) | ELAPSED (s)\n-------------------------------------------------------------\n   0.686552    |  0.727185  |       47.03       |   23.37  \n-------------------------------------------------------------\n\n\n----------\nEpoch : 2\n----------\n--------------------------------------\nBATCH NO. |  TRAIN LOSS  | ELAPSED (s)\n--------------------------------------\n   67     |   0.479001   |   22.60  \n-------------------------------------------------------------\nAVG TRAIN LOSS |  VAL LOSS  | VAL ACCURACY (%) | ELAPSED (s)\n-------------------------------------------------------------\n   0.479001    |  0.608347  |       75.21       |   23.39  \n-------------------------------------------------------------\n\n\n----------\nEpoch : 3\n----------\n--------------------------------------\nBATCH NO. |  TRAIN LOSS  | ELAPSED (s)\n--------------------------------------\n   67     |   0.310904   |   22.63  \n-------------------------------------------------------------\nAVG TRAIN LOSS |  VAL LOSS  | VAL ACCURACY (%) | ELAPSED (s)\n-------------------------------------------------------------\n   0.310904    |  0.597652  |       78.55       |   23.39  \n-------------------------------------------------------------\n\n\n----------\nEpoch : 4\n----------\n--------------------------------------\nBATCH NO. |  TRAIN LOSS  | ELAPSED (s)\n--------------------------------------\n   67     |   0.171800   |   22.60  \n-------------------------------------------------------------\nAVG TRAIN LOSS |  VAL LOSS  | VAL ACCURACY (%) | ELAPSED (s)\n-------------------------------------------------------------\n   0.171800    |  0.696959  |       78.16       |   23.35  \n-------------------------------------------------------------\n\n\nTraining complete!\n","output_type":"stream"}]},{"cell_type":"code","source":"model.save_pretrained(\"path/to/save/directory\")","metadata":{"id":"sOpVZjF6Ngwz","execution":{"iopub.status.busy":"2023-08-06T19:11:53.575396Z","iopub.execute_input":"2023-08-06T19:11:53.57601Z","iopub.status.idle":"2023-08-06T19:11:54.360464Z","shell.execute_reply.started":"2023-08-06T19:11:53.575975Z","shell.execute_reply":"2023-08-06T19:11:54.359388Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"# Load the trained model\nmodel = BertForSequenceClassification.from_pretrained(\"path/to/save/directory\")","metadata":{"id":"r1dKbXhZQ3dJ","execution":{"iopub.status.busy":"2023-08-06T19:11:54.361842Z","iopub.execute_input":"2023-08-06T19:11:54.362303Z","iopub.status.idle":"2023-08-06T19:11:56.779295Z","shell.execute_reply.started":"2023-08-06T19:11:54.362272Z","shell.execute_reply":"2023-08-06T19:11:56.778279Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"def bert_predict(model, test_dataloader):\n    \n    # Define empty list to host the predictions\n    preds_list = []\n    \n    # Put the model into evaluation mode\n    model.eval()\n    \n    for batch in test_dataloader:\n        batch_input_ids, batch_attention_mask = tuple(t.to(device) for t in batch)[:2]\n        \n        # Avoid gradient calculation of tensors by using \"no_grad()\" method\n        with torch.no_grad():\n            logit = model(batch_input_ids, batch_attention_mask)\n        \n        # Get index of highest logit\n        pred = torch.argmax(logit,dim=1).cpu().numpy()\n        # Append predicted class to list\n        preds_list.extend(pred)\n\n    return preds_list","metadata":{"execution":{"iopub.status.busy":"2023-08-06T19:11:56.781007Z","iopub.execute_input":"2023-08-06T19:11:56.781381Z","iopub.status.idle":"2023-08-06T19:11:56.788259Z","shell.execute_reply.started":"2023-08-06T19:11:56.781347Z","shell.execute_reply":"2023-08-06T19:11:56.787355Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"bert_preds = bert_predict(bert_classifier, test_dataloader)","metadata":{"execution":{"iopub.status.busy":"2023-08-06T19:11:56.789964Z","iopub.execute_input":"2023-08-06T19:11:56.790319Z","iopub.status.idle":"2023-08-06T19:11:58.68222Z","shell.execute_reply.started":"2023-08-06T19:11:56.790289Z","shell.execute_reply":"2023-08-06T19:11:58.681221Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"print('Classification Report for Multilingual BERT- Hebrew + Arabic :\\n', classification_report(y_test, bert_preds, target_names=types))","metadata":{"execution":{"iopub.status.busy":"2023-08-06T19:11:58.683924Z","iopub.execute_input":"2023-08-06T19:11:58.684325Z","iopub.status.idle":"2023-08-06T19:11:58.70383Z","shell.execute_reply.started":"2023-08-06T19:11:58.684289Z","shell.execute_reply":"2023-08-06T19:11:58.702649Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"Classification Report for Multilingual BERT- Hebrew + Arabic :\n                precision    recall  f1-score   support\n\ncyberbullying       0.85      0.84      0.84       299\n not bullying       0.84      0.84      0.84       293\n\n     accuracy                           0.84       592\n    macro avg       0.84      0.84      0.84       592\n weighted avg       0.84      0.84      0.84       592\n\n","output_type":"stream"}]},{"cell_type":"code","source":"conf_matrix(y_test, bert_preds,' Multilingual BERT- Hebrew + Arabic \\nConfusion Matrix', types)","metadata":{"execution":{"iopub.status.busy":"2023-08-06T19:11:58.705062Z","iopub.execute_input":"2023-08-06T19:11:58.705402Z","iopub.status.idle":"2023-08-06T19:11:59.097821Z","shell.execute_reply.started":"2023-08-06T19:11:58.705369Z","shell.execute_reply":"2023-08-06T19:11:59.096714Z"},"trusted":true},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 750x750 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"true_negatives = [(idx, text) for idx, (predicted_label, true_label, text) in enumerate(zip(bert_preds, y_test, X_test)) if predicted_label == 0 and true_label == 0]\n\n# Print the examples of True Negatives\nprint(\"Examples of True Negatives:\")\nfor idx, text in true_negatives[:20]:  \\\n    print(f\"Index: {idx}, Text: {text}\")\n","metadata":{"execution":{"iopub.status.busy":"2023-08-06T19:11:59.09916Z","iopub.execute_input":"2023-08-06T19:11:59.099789Z","iopub.status.idle":"2023-08-06T19:11:59.108Z","shell.execute_reply.started":"2023-08-06T19:11:59.099752Z","shell.execute_reply":"2023-08-06T19:11:59.106938Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"Examples of True Negatives:\nIndex: 0, Text: اصلاً من اخطر انواع الضرب هو محاولة الخنق. هذا التصرف بتنبأ بالقتل قبل وقوعه. الافضل انك تبعدي و تبعدي بنتك و انبسطي فيها.\nIndex: 4, Text: اقول افتح طيزك للفرنسي بس\nIndex: 6, Text: حلي عن طيزنا\nIndex: 7, Text: نسيت ماذا فعلت حماس للفلسطينيين في المساجد انهم خونه يعملون كمرتزقه لمن يدف اكثر\nIndex: 13, Text: كس امك\nIndex: 15, Text: هههههههههههههن لا يا شيخ يا عرص\nIndex: 17, Text: פוי איזה מכוערת.. נראית קוף\nIndex: 18, Text: والله طلعتو كذابين ..البنت باللاذقية ،.. راح ثلاث قتله الله لايوفقكم\nIndex: 19, Text: ملكة جمال البزاز\nIndex: 20, Text: انو ما في غيرها عندها طيز كلنا عنا واجمل كمان\nIndex: 28, Text: كول هوا انت\nIndex: 31, Text: לא אבדה כלל. הגיע הזמן שתשתוק!\nIndex: 32, Text: בת זונה גברת פאף\nIndex: 33, Text: قصدك كس اخت هالعيشه ترا نيتي زفره\nIndex: 34, Text: איך זה הגיוני מי תרצה אותך יא הומו\nIndex: 36, Text: בושה צריך לעשות עליך חרם יבוא היום והבומרנג יחזור זו דינה של סחטנות .\nIndex: 37, Text: الحل يا صاحبي انك تسد بوزك\nIndex: 38, Text: بما انو المنشور تافه افتح طيزك\nIndex: 41, Text: طب يرمي الصدرية اللي لابسها أول\nIndex: 44, Text: ماعرفنا عم يفوتو من ورا ولا من قدام\n","output_type":"stream"}]},{"cell_type":"code","source":"false_negatives = [(idx, text) for idx, (predicted_label, true_label, text) in enumerate(zip(bert_preds, y_test, X_test)) if predicted_label == 0 and true_label == 1]\n\n# Print the examples of False Negatives\nprint(\"Examples of False Negatives:\")\nfor idx, text in false_negatives[:10]: \n    print(f\"Index: {idx}, Text: {text}\")\n ","metadata":{"execution":{"iopub.status.busy":"2023-08-06T19:11:59.109649Z","iopub.execute_input":"2023-08-06T19:11:59.110451Z","iopub.status.idle":"2023-08-06T19:11:59.119068Z","shell.execute_reply.started":"2023-08-06T19:11:59.110409Z","shell.execute_reply":"2023-08-06T19:11:59.117837Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"Examples of False Negatives:\nIndex: 1, Text: والله حلياني يا ضرساني\nIndex: 8, Text: احسنت كلام راقي عبرة لمن اعتبر بس لا سف ماحدإ عم يعتبر\nIndex: 9, Text: די אוף נמאס כבר מהם\nIndex: 60, Text: اليد الشايله تلفون إن شاء الله تمس الكعبه وتشرب ماء زمزم\nIndex: 71, Text: מצחיק שגדעון סער ולפיד בעצמם חתומים בהסכם קואליציוני עם רפורמה במערכת המשפט.\nIndex: 92, Text: يلي بحبك ببلعلك الزلط ،ويلي مابحبك بوقفلك على غلط .سيبك منها ومع الف سلامة ...يلي خلقها خلق غيرها\nIndex: 136, Text: حروفك ساحرة جدا لا أدري من أين تأتي بكل هذه الرصانة\nIndex: 150, Text: את מהממת אל תקשיבי לו\nIndex: 155, Text: תברחי, נשמע שהוא לא רק קמצן אלא גם פסיכופת\nIndex: 177, Text: הבחור הזה נס אדיר, השגחה מוקפדת מאוד עליו. אמן בעזרת המקרה שלו יועילו להקל בתנאי קבלת סיוע הדרוש לנפגעי טראומה מצה\"ל.\n","output_type":"stream"}]},{"cell_type":"code","source":"true_positives = [(idx, text) for idx, (predicted_label, true_label, text) in enumerate(zip(bert_preds, y_test, X_test)) if predicted_label == 1 and true_label == 1]\n# Print examples of True Positives\nprint(\"\\nExamples of True Positives:\")\nfor idx, text in true_positives[:30]:  \n    print(f\"Index: {idx}, Text: {text}\")","metadata":{"execution":{"iopub.status.busy":"2023-08-06T19:11:59.120871Z","iopub.execute_input":"2023-08-06T19:11:59.121235Z","iopub.status.idle":"2023-08-06T19:11:59.129757Z","shell.execute_reply.started":"2023-08-06T19:11:59.121206Z","shell.execute_reply":"2023-08-06T19:11:59.128898Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"\nExamples of True Positives:\nIndex: 5, Text: كلام صح الرفيق قبل الطريق الجار قبل الدار اللهم جاورنا بالأحسن مننا يارب العالمين امين\nIndex: 10, Text: רצף של שלמות עם קול אלוהי\nIndex: 11, Text: اللهم زوجا صالحاً مُتقياً حنوناً طيب القلب نكون سند لبعضنا في الدنيا والآخرة\nIndex: 12, Text: יוצר ענק אחד בדור ממש חבל\nIndex: 16, Text: לפעמים מרגיש שבחורות רק מחפשות לתסבך דברים אחרת הן לא רגועות!\nIndex: 21, Text: יושבים בבית? מה אנחנו מליונרים?\nIndex: 22, Text: אתם והסיטואציה פשוט מתוקים, שתמיד תחשקו אחד בשניה!\nIndex: 23, Text: يا الله شو بحبك يا ياسمين\nIndex: 24, Text: كل الحب والاحترام والتقدير لجارة القمر وارزة لبنان العملاقة السيدة فيروز.\nIndex: 25, Text: שיהייה בהצלחה.שניהם נחמדים ומקצועיים כל אחד בתחומו.\nIndex: 26, Text: אני יושב בבית וממשיך כרגיל \nIndex: 29, Text: عيني ربك شادي...فنان رائع\nIndex: 30, Text: יש לי הרגשה שרב החובל היה סוכן איראני\nIndex: 35, Text: היא אמרה מה שרבים מאיתנו חושבים. אז מה קרה? מגיע לה חיבוק ענק\nIndex: 39, Text: شكرا لكم على مروركم الكريم وتعليقاتكم الرائعة وحفظ الله امتنا وبلادنا والمسلمين\nIndex: 42, Text: נו, ואם זו הייתה בריכה נוסעת ובתוכה טנדר מאולתר זה היה בסדר, נכון? חייבים רפורמה משפטית\nIndex: 43, Text: בהצלחה, מחזיקה לך אצבעות שתצליחי להעביר חוקים שיגנו על הילדים\nIndex: 47, Text: יפה כל כך נסיכה מאמי מהממת \nIndex: 48, Text: יש פה אנשים שלא מצליחים למצוא אחד היא מוצאת שלוש\nIndex: 50, Text: ماشاءالله عليهم والشكل الهندسي الرائع والعمل المتقن خلق الله الانسان بعقل ليفكر فيه ويستخدمه لعمل يفيده ويفيد البشريه جميعاَ\nIndex: 56, Text: يعطيك العافه عمي وفي احلى شغل\nIndex: 57, Text: اشفي أمي وعافها واحفظها واسترها وارزقنا وإياها حسن العاقبة وحسن الخاتمة\nIndex: 58, Text: انيق بكل حالاتك ومتميز بكل مراحلك\nIndex: 65, Text: تعرفي اصعب شي ع الانسان يكون ابتلاءه بأهلو لا بتعرفي تشكي ولا بتعرفي تحكي  الله يفرجها عليك\nIndex: 67, Text: זאת הבחורה הכי יפה ופנים מושלמות שראיתי אי פעם ממש משורטטת\nIndex: 68, Text: יפה עשית ויפה שעה אחת קודם\nIndex: 69, Text: مرورك يضفي جمالا على حروفي ياصاحبة اطيب قلب عطر روحك بين ثنايا كلماتك تشرق ايامي بمرورك\nIndex: 72, Text: مطربة رائعة بكل معنى الكلمة\nIndex: 73, Text: יש בעיה אני לא יודע לצלול\nIndex: 74, Text: رضا الأم من رضا الرب ياريت تراضي أمها علشان ينصلح حالها وتبقي في أحسن حال\n","output_type":"stream"}]},{"cell_type":"code","source":"false_positives = [(idx, text) for idx, (predicted_label, true_label, text) in enumerate(zip(bert_preds, y_test, X_test)) if predicted_label == 1 and true_label == 0]\n# Print examples of False Positives\nprint(\"\\nExamples of False Positives:\")\nfor idx, text in false_positives[:30]: \n    print(f\"Index: {idx}, Text: {text}\")","metadata":{"execution":{"iopub.status.busy":"2023-08-06T19:11:59.131067Z","iopub.execute_input":"2023-08-06T19:11:59.131544Z","iopub.status.idle":"2023-08-06T19:11:59.14151Z","shell.execute_reply.started":"2023-08-06T19:11:59.131513Z","shell.execute_reply":"2023-08-06T19:11:59.140629Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"\nExamples of False Positives:\nIndex: 2, Text: الله ياخدك قولي امين\nIndex: 3, Text: בהצלחה ישר כוח!!! אתך בכל הדרך! שישב בפנים והלוואי שיתעללו בו עד סוף יומו.\nIndex: 14, Text: גם ביבי לא חשב פעמיים ומכר את הארץ שלי לניסויים רפואיים ענקיים.\nIndex: 27, Text: الصراحه عندها خلفيه حضاريه جدا\nIndex: 40, Text: כמה אני מקללת אותה כמה נשרף הלב, הלוואי ואפשר היה להחזיר את הזמן לאחור\nIndex: 53, Text: من علامات يوم القيامة جهنم وبئس المصير\nIndex: 79, Text: حسن عندك انفصام بالشخصية\nIndex: 118, Text: احسن حل مع هيك شخص هو التجاهل حطي ايرك علي و كملي حياتك مع بنتك \nIndex: 119, Text: سكس علنًا\nIndex: 127, Text: הינה הוכחה שזה מחלת נפש. מזל לא בחר להיות קרנף. אז היה עושה ניתוח לשינוי פנים כמו קרנף. בקיצור מחלת נפש\nIndex: 142, Text: ילד כאפות\nIndex: 153, Text: لمن يكون المخ بين الرجلين\nIndex: 167, Text: الشي الوحيد الي تهزو بطولو وعرضو هو ايري على هالفيديو\nIndex: 174, Text: الصراحة بوست كثير مؤثر بخلي القارئ يفرط ضحك \nIndex: 176, Text: كمية الجهل بالتعليقات مش معقوله مثل ستك\nIndex: 178, Text: אחר כך אומרים למה עושים עליה חרם, כי היא חרא בחורה\nIndex: 192, Text: انشاء الله ما بترجع\nIndex: 206, Text: חייבים טיפול ....זה הולך ומדרדר\nIndex: 217, Text: הדבר היחידי שאת יודעת לעשות זה להראות את התחת שלך, זה כל מה שאת\nIndex: 219, Text: אוי ויי אתה פשוט בדילה תתאבד אחי באמת.\nIndex: 260, Text: قصدك سقوط الحياء و الكرامة\nIndex: 263, Text: אתם יותר גרועים ממחלה\nIndex: 271, Text: يعني شكوك أهلك بمحلها انفتحتي\nIndex: 272, Text: צריך להחרים אותו ולא ללכת להופעות שלו ושלא יזמינו אותו להופעות בארץ\nIndex: 287, Text: لقيت حد اقصر من صاحبتي\nIndex: 290, Text: يا سيد نتنياهو، لو أعلمت أخوتك من الحكام العرب برأيك هذا، لكانوا نشروه في المناهج المدرسية، و وفرت على نفسك بعض الأصوات المعترضة.\nIndex: 306, Text: יש לי תחושה שהתעללו ביריב לוין בילדות, בעיקר ילדים אחרים ובגלל זה הוא יצא כזה.\nIndex: 308, Text: هذا الجيل ناقصه تربيه ووضع حدود\nIndex: 343, Text: היא ממש לא מעניינת\nIndex: 347, Text: שתיקבר כמה שיותר מהר ולא בישראל\n","output_type":"stream"}]}]}